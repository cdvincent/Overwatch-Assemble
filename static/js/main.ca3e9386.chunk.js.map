{"version":3,"sources":["components/Card.js","components/Wrapper.js","components/Nav.js","Choices.js","components/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","style","width","height","alt","name","src","image","onClick","randomizeChoices","id","Wrapper","children","Nav","color","href","message","score","highScore","Choices","Jumbotron","App","state","choices","chosen","includes","setState","push","length","i","j","Math","floor","random","this","map","choice","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca3e9386.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nconst Card = props => {\n\n    return (\n        <div className=\"card\" style={{width:175, height:120}}>\n            <img style={{width:175, height:120}} alt={props.name} src={props.image} onClick={() => props.randomizeChoices(props.id)} />\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => {\n    return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nconst Nav = props => {\n  return (\n      <nav id=\"nav\">\n        <h3 style={{color:\"white\"}} id=\"logo\" href=\"/\">Clicky Game</h3>\n        <h5 style={{color:\"white\"}}  id=\"message\">{props.message}</h5>\n        <h5 style={{color:\"white\"}} id=\"scores\">Score: {props.score}   High Score: {props.highScore}</h5>\n      </nav>\n  );\n}\n\nexport default Nav;\n","const Choices =\n[\n    {\n      \"id\": 1,\n      \"name\": \"Ana\",\n      \"image\":\"https://cdn.vox-cdn.com/thumbor/nO9dMgORnBQPM2f_eHf3fIBqpzM=/0x0:1920x1161/1200x800/filters:focal(807x428:1113x734)/cdn.vox-cdn.com/uploads/chorus_image/image/58000763/Ana.0.jpg\"\n    },   \n    {\n      \"id\": 2,\n      \"name\": \"Doomfist\",\n      \"image\":\"https://images2.minutemediacdn.com/image/upload/c_fill,w_912,h_516,f_auto,q_auto,g_auto/shape/cover/sport/5b6220d4778c50452d000001.jpeg\"      \n    },\n    {\n      \"id\": 3,\n      \"name\": \"Soldier 76\",\n      \"image\":\"https://i.ytimg.com/vi/WAQioaxeMUA/maxresdefault.jpg\"      \n    },\n    {\n      \"id\": 4,\n      \"name\": \"Tracer\",\n      \"image\":\"https://cdn.gamer-network.net/2016/usgamer/Overwatch-Guide-Tracer-Header.jpg/EG11/thumbnail/1920x1080/format/jpg/quality/65/21-12-2017-overwatch-how-to-play-tracer.jpg\"      \n    },\n    {\n      \"id\": 5,\n      \"name\": \"Reaper\",\n      \"image\":\"https://i.etsystatic.com/11564499/r/il/df15e0/1223325470/il_570xN.1223325470_f2am.jpg\"      \n    },\n    {\n      \"id\": 6,\n      \"name\": \"Orisa\",\n      \"image\":\"https://cdn.images.express.co.uk/img/dynamic/143/590x/Orisa-Overwatch-774427.jpg\"      \n    },\n    {\n      \"id\": 7,\n      \"name\": \"McCree\",\n      \"image\":\"https://cdn.oneesports.gg/wp-content/uploads/2020/01/overwatchmccree.jpg\"      \n    },\n    {\n      \"id\": 8,\n      \"name\": \"Genji\",\n      \"image\":\"https://cdn.shopify.com/s/files/1/0727/8355/products/ae08956b-f1f1-48ed-8850-5a31154870ff_2048x2048_53f06219-d0fa-41ce-a39d-da358cd4860a_800x.jpg?v=1532280373\"      \n    },\n    {\n      \"id\": 9,\n      \"name\": \"Hanzo\",\n      \"image\":\"https://img.resized.co/dexerto/eyJkYXRhIjoie1widXJsXCI6XCJodHRwczpcXFwvXFxcL2ltYWdlcy5kZXhlcnRvLmNvbVxcXC91cGxvYWRzXFxcL3RodW1ibmFpbHNcXFwvX3RodW1ibmFpbExhcmdlXFxcL2dlb2ZmLWdvb2RtYW4tY29uZmlybXMtaGFuem8tbmVyZi1jb21pbmctb3ZlcndhdGNoLmpwZ1wiLFwid2lkdGhcIjo2MjAsXCJoZWlnaHRcIjozNDcsXCJkZWZhdWx0XCI6XCJodHRwczpcXFwvXFxcL3MzLWV1LXdlc3QtMS5hbWF6b25hd3MuY29tXFxcL3BwbHVzLmltYWdlcy5kZXhlcnRvLmNvbVxcXC91cGxvYWRzXFxcLzIwMTlcXFwvMTFcXFwvMTEyMTQ5NDNcXFwvcGxhY2Vob2xkZXIuanBnXCJ9IiwiaGFzaCI6IjU3ZTJjNzhjNmVlNGY3MjQ2NzFhZDI5NDlkMzIzMTNiNzA2NzIyYTgifQ==/overwatch-lead-developer-geoff-goodman-confirms-a-hanzo-nerf-is-coming.jpg\"      \n    },\n    {\n      \"id\": 10,\n      \"name\": \"Widomaker\",\n      \"image\":\"https://cdn1us.denofgeek.com/sites/denofgeekus/files/styles/main_wide/public/2018/11/overwatch-mercy.png?itok=viQjeDNM\"      \n    },\n    {\n      \"id\": 11,\n      \"name\": \"Reinhardt\",\n      \"image\":\"https://static.invenglobal.com/upload/image/2017/03/12/i1489378387953872.jpeg\"      \n    },\n    {\n      \"id\": 12,\n      \"name\": \"Mei\",\n      \"image\":\"https://thumbor.forbes.com/thumbor/960x0/https%3A%2F%2Fblogs-images.forbes.com%2Fcurtissilver%2Ffiles%2F2016%2F06%2Fmei-e1464958374278.jpg\"      \n    }\n];\n\nexport default Choices;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n      <h1>Clicky-Game</h1>\n      <p>\n        Click an image to begin! Click all of the images without repeating any and you win!\n      </p>\n    </div>\n  );\n}\n\nexport default Jumbotron;","import React, { Component } from 'react';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Nav\";\nimport choices from \"./Choices.js\";\nimport Jumbotron from './components/Jumbotron';\n\nclass App extends Component {\n\n        state = {\n                choices,\n                chosen: [],\n                score: 0,\n                highScore: 0,\n                message: \"Select an image to start!\"\n        };\n        \n        randomizeChoices = id => {\n                let chosen = this.state.chosen;\n\n                if (chosen.includes(id)) {\n                        this.setState({ chosen: [], score: 0, message: \"You already chose that one. Game over!\" });\n                        return;\n                } else {\n                        chosen.push(id);\n                        \n                        if (this.state.score === 11) {\n                                this.setState({score: 0, highScore: 12, message: \"You Win!\", chosen: []});\n                                return;\n                        }\n                        if (this.state.score >= this.state.highScore) {\n                                this.setState({ highScore: chosen.length });\n                        }\n                \n                        this.setState({ choices, chosen, score: chosen.length, message: \"Select an image!\" });\n\n\n                        for (let i = choices.length - 1; i > 0; i--) {\n                                let j = Math.floor(Math.random() * (i + 1));\n                                [choices[i], choices[j]] = [choices[j], choices[i]];\n                        };\n                }\n        };\n        \n\n        render() {                \n                return (\n                <div>\n                <Nav \n                        score={this.state.score}\n                        highScore={this.state.highScore}\n                        message={this.state.message}\n                />\n                <Jumbotron />\n                <Wrapper>\n                        {this.state.choices.map(choice => (\n                        <Card \n                                id={choice.id}\n                                key={choice.id}\n                                name={choice.name} \n                                image={choice.image}\n                                randomizeChoices={this.randomizeChoices}\n                        />\n                        ))}\n                </Wrapper>\n                </div>\n                );\n        };\n        \n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}